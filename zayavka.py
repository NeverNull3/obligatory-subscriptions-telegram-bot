from typing import Final
from telegram import Update, ChatJoinRequest, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    ChatJoinRequestHandler,
    CallbackQueryHandler,
    ContextTypes,
)
import logging
import asyncio
# Telegram Bot
BOT_TOKEN: Final = '7498381758:AAGsCgpWWXvTt6lChYVQB0FPKVQRuapKqeY'
BOT_USERNAME: Final = '@zayavka3235_bot'

CHANNEL_ID: Final = -1002590131692
ADMIN_ID: Final = 7531644627  

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∑–∞—è–≤–æ–∫
pending_requests = {}

CHANNEL_LINKS = [
    "https://t.me/+Link1",
    "https://t.me/+Link2",
    "https://t.me/+Link3"
]

# === –ö–ù–û–ü–ö–ò ===
keyboard = [
    [InlineKeyboardButton("üìå –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª", url=CHANNEL_LINKS[0])],
    [InlineKeyboardButton("‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ –≤—Å–µ", callback_data='check_subscribe')]
]
main_menu = InlineKeyboardMarkup(keyboard)

# === –û–ë–†–ê–ë–û–¢–ö–ê –ó–ê–Ø–í–ö–ò ===
async def approve_request(update: Update, context: ContextTypes.DEFAULT_TYPE):
    join_request: ChatJoinRequest = update.chat_join_request
    user = join_request.from_user

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞—è–≤–∫—É –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    pending_requests[user.id] = join_request

    text = (
        f"<b>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user.full_name}!</b>\n\n"
        "–í–∞–º –æ—Ç–∫—Ä—ã—Ç –¥–æ—Å—Ç—É–ø –∫ —Å–µ–∫—Ä–µ—Ç–Ω—ã–º –∞—Ä—Ö–∏–≤–∞–º. –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º—É –∫–∞–Ω–∞–ª—É:\n\n"
    )
    for i, link in enumerate(CHANNEL_LINKS, start=1):
        text += f"{i}: {link}\n"
    text += "\n–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ."

    await context.bot.send_message(
        chat_id=user.id,
        text=text,
        parse_mode='HTML',
        reply_markup=main_menu
    )

# === –û–ë–†–ê–ë–û–¢–ö–ê –ö–ù–û–ü–ö–ò ===
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == 'check_subscribe':
        user_id = query.from_user.id

        # –°–∏–º—É–ª–∏—Ä—É–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –æ–¥–æ–±—Ä–µ–Ω–∏–µ
        if user_id in pending_requests:
            try:
                asyncio.sleep(3)
                await pending_requests[user_id].approve()
                await query.edit_message_text("‚úÖ –í—ã –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –∫–∞–Ω–∞–ª. –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É!")
                del pending_requests[user_id]
            except Exception as e:
                await query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–¥–æ–±—Ä–∏—Ç—å –∑–∞—è–≤–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                print(e)
        else:
            await query.edit_message_text("‚è≥ –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –æ–¥–æ–±—Ä–µ–Ω–∞.")

# === –ó–ê–ü–£–°–ö ===
def main():
    logging.basicConfig(level=logging.INFO)

    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(ChatJoinRequestHandler(approve_request))
    app.add_handler(CallbackQueryHandler(button_handler))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    app.run_polling()

if __name__ == '__main__':
    main()
